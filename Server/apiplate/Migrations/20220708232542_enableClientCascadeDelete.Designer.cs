// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using apiplate.DataBase;

namespace apiplate.Migrations
{
    [DbContext(typeof(ApiplateDbContext))]
    [Migration("20220708232542_enableClientCascadeDelete")]
    partial class enableClientCascadeDelete
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("apiplate.Models.Activity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("EffectedRowId")
                        .HasColumnType("int");

                    b.Property<string>("EffectedTable")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("apiplate.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsManager")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2022, 7, 9, 1, 25, 41, 848, DateTimeKind.Local).AddTicks(4374),
                            Email = "almunzir99@gmail.com",
                            IsManager = true,
                            LastUpdate = new DateTime(2022, 7, 9, 1, 25, 41, 849, DateTimeKind.Local).AddTicks(4784),
                            PasswordHash = new byte[] { 68, 24, 214, 165, 192, 113, 128, 86, 24, 162, 224, 189, 176, 54, 47, 212, 243, 97, 164, 148, 94, 140, 47, 16, 51, 166, 57, 164, 250, 253, 135, 99, 162, 235, 133, 63, 187, 191, 116, 3, 76, 96, 167, 115, 80, 130, 198, 36, 22, 116, 33, 238, 68, 26, 191, 60, 237, 43, 198, 9, 9, 161, 83, 65 },
                            PasswordSalt = new byte[] { 133, 252, 35, 208, 226, 180, 194, 199, 242, 203, 251, 236, 244, 22, 11, 49, 48, 230, 79, 121, 44, 50, 106, 176, 200, 105, 146, 106, 229, 67, 178, 80, 218, 184, 174, 41, 218, 101, 131, 250, 158, 112, 149, 157, 92, 54, 92, 197, 41, 176, 212, 10, 0, 219, 237, 179, 73, 186, 143, 27, 247, 155, 53, 139, 250, 137, 191, 19, 43, 23, 175, 87, 141, 103, 54, 74, 214, 243, 10, 253, 47, 73, 234, 140, 231, 30, 101, 17, 232, 36, 27, 71, 118, 85, 77, 229, 217, 35, 236, 134, 199, 236, 81, 232, 228, 249, 234, 37, 245, 137, 86, 205, 94, 219, 145, 211, 208, 76, 56, 152, 123, 125, 100, 94, 219, 148, 217, 192 },
                            Phone = "249128647019",
                            Username = "almunzir99"
                        });
                });

            modelBuilder.Entity("apiplate.Models.ArticleBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubtitleId")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("ContentId")
                        .IsUnique();

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("SubtitleId")
                        .IsUnique();

                    b.HasIndex("TitleId")
                        .IsUnique();

                    b.ToTable("ArticleBase");

                    b.HasDiscriminator<string>("Discriminator").HasValue("ArticleBase");
                });

            modelBuilder.Entity("apiplate.Models.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleBaseId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ArticleBaseId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("apiplate.Models.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("apiplate.Models.Media", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("MainVideo")
                        .HasColumnType("bit");

                    b.Property<string>("MediaType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ThumbnailId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ThumbnailId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("apiplate.Models.Message", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("apiplate.Models.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("AdminId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int?>("GroupedItem")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Module")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("apiplate.Models.Partner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LogoId")
                        .HasColumnType("int");

                    b.Property<int>("NameId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LogoId")
                        .IsUnique();

                    b.HasIndex("NameId")
                        .IsUnique();

                    b.ToTable("Partners");
                });

            modelBuilder.Entity("apiplate.Models.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Create")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<bool>("Delete")
                        .HasColumnType("bit");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Read")
                        .HasColumnType("bit");

                    b.Property<bool>("Update")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("apiplate.Models.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("DescriptionId")
                        .HasColumnType("int");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId")
                        .IsUnique();

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("TitleId")
                        .IsUnique();

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("apiplate.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AdminsPermissionsId")
                        .HasColumnType("int");

                    b.Property<int?>("ArticlesPermissionsId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MediaPermissionsId")
                        .HasColumnType("int");

                    b.Property<int?>("MessagesPermissionsId")
                        .HasColumnType("int");

                    b.Property<int?>("PartnersPermissionsId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectsPermissionsId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionsPermissionsId")
                        .HasColumnType("int");

                    b.Property<int?>("RolesPermissionsId")
                        .HasColumnType("int");

                    b.Property<int?>("SectorsPermissionsId")
                        .HasColumnType("int");

                    b.Property<int?>("SlidersPermissionsId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamPermissionsId")
                        .HasColumnType("int");

                    b.Property<int?>("TestimonialsPermissionsId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AdminsPermissionsId");

                    b.HasIndex("ArticlesPermissionsId");

                    b.HasIndex("MediaPermissionsId");

                    b.HasIndex("MessagesPermissionsId");

                    b.HasIndex("PartnersPermissionsId");

                    b.HasIndex("ProjectsPermissionsId");

                    b.HasIndex("RegionsPermissionsId");

                    b.HasIndex("RolesPermissionsId");

                    b.HasIndex("SectorsPermissionsId");

                    b.HasIndex("SlidersPermissionsId");

                    b.HasIndex("TeamPermissionsId");

                    b.HasIndex("TestimonialsPermissionsId");

                    b.HasIndex("Title")
                        .IsUnique()
                        .HasFilter("[Title] IS NOT NULL");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("apiplate.Models.Sector", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("DescriptionId")
                        .HasColumnType("int");

                    b.Property<int>("IconId")
                        .HasColumnType("int");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId")
                        .IsUnique();

                    b.HasIndex("IconId")
                        .IsUnique();

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("TitleId")
                        .IsUnique();

                    b.ToTable("Sectors");
                });

            modelBuilder.Entity("apiplate.Models.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("DescriptionId")
                        .HasColumnType("int");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SubtitleId")
                        .HasColumnType("int");

                    b.Property<int>("TitleId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DescriptionId")
                        .IsUnique();

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("SubtitleId")
                        .IsUnique();

                    b.HasIndex("TitleId")
                        .IsUnique();

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("apiplate.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ArticleBaseId")
                        .HasColumnType("int");

                    b.Property<int>("TranslationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleBaseId");

                    b.HasIndex("TranslationId")
                        .IsUnique();

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("apiplate.Models.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Facebook")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<string>("Instgram")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LinkedIn")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NameId")
                        .HasColumnType("int");

                    b.Property<int>("PositionId")
                        .HasColumnType("int");

                    b.Property<int>("Priority")
                        .HasColumnType("int");

                    b.Property<string>("Twitter")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("NameId")
                        .IsUnique();

                    b.HasIndex("PositionId")
                        .IsUnique();

                    b.ToTable("Team");
                });

            modelBuilder.Entity("apiplate.Models.Testimonial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("ImageId")
                        .HasColumnType("int");

                    b.Property<int>("JobId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .IsUnique();

                    b.HasIndex("ContentId")
                        .IsUnique();

                    b.HasIndex("ImageId")
                        .IsUnique();

                    b.HasIndex("JobId")
                        .IsUnique();

                    b.ToTable("Testimonials");
                });

            modelBuilder.Entity("apiplate.Models.Translation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AR")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EN")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Translations");
                });

            modelBuilder.Entity("apiplate.Models.Article", b =>
                {
                    b.HasBaseType("apiplate.Models.ArticleBase");

                    b.HasDiscriminator().HasValue("Article");
                });

            modelBuilder.Entity("apiplate.Models.Project", b =>
                {
                    b.HasBaseType("apiplate.Models.ArticleBase");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.HasIndex("RegionId");

                    b.HasIndex("SectorId");

                    b.HasDiscriminator().HasValue("Project");
                });

            modelBuilder.Entity("apiplate.Models.Activity", b =>
                {
                    b.HasOne("apiplate.Models.Admin", null)
                        .WithMany("Activities")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.ClientCascade);
                });

            modelBuilder.Entity("apiplate.Models.Admin", b =>
                {
                    b.HasOne("apiplate.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("apiplate.Models.ArticleBase", b =>
                {
                    b.HasOne("apiplate.Models.Admin", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("apiplate.Models.Translation", "Content")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.ArticleBase", "ContentId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("apiplate.Models.Image", "Image")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.ArticleBase", "ImageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("apiplate.Models.Translation", "Subtitle")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.ArticleBase", "SubtitleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("apiplate.Models.Translation", "Title")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.ArticleBase", "TitleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Content");

                    b.Navigation("Image");

                    b.Navigation("Subtitle");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("apiplate.Models.Comment", b =>
                {
                    b.HasOne("apiplate.Models.ArticleBase", null)
                        .WithMany("Comments")
                        .HasForeignKey("ArticleBaseId")
                        .OnDelete(DeleteBehavior.ClientCascade);
                });

            modelBuilder.Entity("apiplate.Models.Media", b =>
                {
                    b.HasOne("apiplate.Models.Image", "Thumbnail")
                        .WithMany()
                        .HasForeignKey("ThumbnailId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("apiplate.Models.Notification", b =>
                {
                    b.HasOne("apiplate.Models.Admin", null)
                        .WithMany("Notifications")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.ClientCascade);
                });

            modelBuilder.Entity("apiplate.Models.Partner", b =>
                {
                    b.HasOne("apiplate.Models.Image", "Logo")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.Partner", "LogoId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("apiplate.Models.Translation", "Name")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.Partner", "NameId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Logo");

                    b.Navigation("Name");
                });

            modelBuilder.Entity("apiplate.Models.Region", b =>
                {
                    b.HasOne("apiplate.Models.Translation", "Description")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.Region", "DescriptionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("apiplate.Models.Image", "Image")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.Region", "ImageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("apiplate.Models.Translation", "Title")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.Region", "TitleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Description");

                    b.Navigation("Image");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("apiplate.Models.Role", b =>
                {
                    b.HasOne("apiplate.Models.Permission", "AdminsPermissions")
                        .WithMany()
                        .HasForeignKey("AdminsPermissionsId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("apiplate.Models.Permission", "ArticlesPermissions")
                        .WithMany()
                        .HasForeignKey("ArticlesPermissionsId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("apiplate.Models.Permission", "MediaPermissions")
                        .WithMany()
                        .HasForeignKey("MediaPermissionsId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("apiplate.Models.Permission", "MessagesPermissions")
                        .WithMany()
                        .HasForeignKey("MessagesPermissionsId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("apiplate.Models.Permission", "PartnersPermissions")
                        .WithMany()
                        .HasForeignKey("PartnersPermissionsId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("apiplate.Models.Permission", "ProjectsPermissions")
                        .WithMany()
                        .HasForeignKey("ProjectsPermissionsId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("apiplate.Models.Permission", "RegionsPermissions")
                        .WithMany()
                        .HasForeignKey("RegionsPermissionsId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("apiplate.Models.Permission", "RolesPermissions")
                        .WithMany()
                        .HasForeignKey("RolesPermissionsId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("apiplate.Models.Permission", "SectorsPermissions")
                        .WithMany()
                        .HasForeignKey("SectorsPermissionsId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("apiplate.Models.Permission", "SlidersPermissions")
                        .WithMany()
                        .HasForeignKey("SlidersPermissionsId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("apiplate.Models.Permission", "TeamPermissions")
                        .WithMany()
                        .HasForeignKey("TeamPermissionsId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("apiplate.Models.Permission", "TestimonialsPermissions")
                        .WithMany()
                        .HasForeignKey("TestimonialsPermissionsId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.Navigation("AdminsPermissions");

                    b.Navigation("ArticlesPermissions");

                    b.Navigation("MediaPermissions");

                    b.Navigation("MessagesPermissions");

                    b.Navigation("PartnersPermissions");

                    b.Navigation("ProjectsPermissions");

                    b.Navigation("RegionsPermissions");

                    b.Navigation("RolesPermissions");

                    b.Navigation("SectorsPermissions");

                    b.Navigation("SlidersPermissions");

                    b.Navigation("TeamPermissions");

                    b.Navigation("TestimonialsPermissions");
                });

            modelBuilder.Entity("apiplate.Models.Sector", b =>
                {
                    b.HasOne("apiplate.Models.Translation", "Description")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.Sector", "DescriptionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("apiplate.Models.Image", "Icon")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.Sector", "IconId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("apiplate.Models.Image", "Image")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.Sector", "ImageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("apiplate.Models.Translation", "Title")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.Sector", "TitleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Description");

                    b.Navigation("Icon");

                    b.Navigation("Image");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("apiplate.Models.Slider", b =>
                {
                    b.HasOne("apiplate.Models.Translation", "Description")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.Slider", "DescriptionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("apiplate.Models.Image", "Image")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.Slider", "ImageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("apiplate.Models.Translation", "Subtitle")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.Slider", "SubtitleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("apiplate.Models.Translation", "Title")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.Slider", "TitleId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Description");

                    b.Navigation("Image");

                    b.Navigation("Subtitle");

                    b.Navigation("Title");
                });

            modelBuilder.Entity("apiplate.Models.Tag", b =>
                {
                    b.HasOne("apiplate.Models.ArticleBase", null)
                        .WithMany("Tags")
                        .HasForeignKey("ArticleBaseId")
                        .OnDelete(DeleteBehavior.ClientCascade);

                    b.HasOne("apiplate.Models.Translation", "Translation")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.Tag", "TranslationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Translation");
                });

            modelBuilder.Entity("apiplate.Models.Team", b =>
                {
                    b.HasOne("apiplate.Models.Image", "Image")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.Team", "ImageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("apiplate.Models.Translation", "Name")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.Team", "NameId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("apiplate.Models.Translation", "Position")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.Team", "PositionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Image");

                    b.Navigation("Name");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("apiplate.Models.Testimonial", b =>
                {
                    b.HasOne("apiplate.Models.Translation", "Author")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.Testimonial", "AuthorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("apiplate.Models.Translation", "Content")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.Testimonial", "ContentId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("apiplate.Models.Image", "Image")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.Testimonial", "ImageId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("apiplate.Models.Translation", "Job")
                        .WithOne()
                        .HasForeignKey("apiplate.Models.Testimonial", "JobId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Content");

                    b.Navigation("Image");

                    b.Navigation("Job");
                });

            modelBuilder.Entity("apiplate.Models.Project", b =>
                {
                    b.HasOne("apiplate.Models.Region", "Region")
                        .WithMany("Projects")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("apiplate.Models.Sector", "Sector")
                        .WithMany("Projects")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("apiplate.Models.Admin", b =>
                {
                    b.Navigation("Activities");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("apiplate.Models.ArticleBase", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Tags");
                });

            modelBuilder.Entity("apiplate.Models.Region", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("apiplate.Models.Sector", b =>
                {
                    b.Navigation("Projects");
                });
#pragma warning restore 612, 618
        }
    }
}
